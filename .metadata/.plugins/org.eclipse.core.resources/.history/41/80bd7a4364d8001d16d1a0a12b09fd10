package br.com.magna.botanica.api.service;

import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import br.com.magna.botanica.api.model.Planta;
import br.com.magna.botanica.api.record.DadosAtualizacaoPlantaRecord;
import br.com.magna.botanica.api.record.DadosCadastroPlantaRecord;
import br.com.magna.botanica.api.record.DadosDetalhamentoPlantaRecord;
import br.com.magna.botanica.api.repository.PlantaRepository;
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
class PlantaControllerTest {
	
	@Autowired
	private TestRestTemplate restTemplate;

	
	@Test
	void testCadastrar() {
		DadosCadastroPlantaRecord dados = new DadosCadastroPlantaRecord("ANDREAIDAE", "VERDE AZULADO", 2L, 4L, 5L, 2L, 2L, 4L);
		ResponseEntity<String> response = restTemplate.postForEntity("/plantas/cadastrar", dados, String.class);
		Assert.assertEquals(HttpStatus.CREATED, response.getStatusCode());
	}
	
	@Test
	void testAtualizar() {
		DadosAtualizacaoPlantaRecord dados = new DadosAtualizacaoPlantaRecord(7L, "PINHEIRO - ATUALIZADO", "CASTANHO", 4L, 10L, 19L,
				5L, 4L, 10L);
		ResponseEntity<DadosDetalhamentoPlantaRecord> response = restTemplate.exchange("/plantas/atualizar", HttpMethod.PUT,
				new HttpEntity<>(dados), DadosDetalhamentoPlantaRecord.class);
		Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
		Assert.assertEquals("PINHEIRO - ATUALIZADO", response.getBody().nome());
	}
	
	@Test
	void testDetalhar() {
		ResponseEntity<String> response = restTemplate.exchange("/plantas/detalhar/1", 
				HttpMethod.GET,null, String.class);
				Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
				Assert.assertEquals("{\"id\":1,\"nome\":\"SAMAMBAIA\",\"cor\":\"VERDE ESCURO\",\"filo\":\"GIMNOSPERMA\",\"classe\":\"CONIFERAS\",\"ordem\":\"SEM ORDEM\",\"raiz\":\"AXIAL\",\"caule\":\"LENHOSO\",\"folhagem\":\"ACICULAR\",\"folhas_verdadeiras\":true,\"caules_verdadeiros\":true,\"raizes_verdadeiras\":true,\"flores\":false,\"frutos\":false,\"sementes\":true,\"ativo\":true}",response.getBody());
				Assert.assertEquals(MediaType.APPLICATION_JSON, response.getHeaders().getContentType());
	}
	
	@Test
	void testListar() {
		ResponseEntity<String> response = restTemplate.exchange("/plantas/listagem?page=0&size=10", 
		HttpMethod.GET,null, String.class);
		Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
		Assert.assertNotNull(response.getBody());
		Assert.assertEquals(MediaType.APPLICATION_JSON, response.getHeaders().getContentType());
	}
	
	@Test
	void testExcluir() {
		restTemplate.delete("/plantas/excluir/6");
		ResponseEntity<Planta> response = restTemplate.getForEntity("/excluir/6", Planta.class);
		Assert.assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	}
}

package br.com.magna.botanica.api.exceptions;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import br.com.magna.botanica.api.record.DadosAtualizacaoPlantaRecord;
import br.com.magna.botanica.api.record.DadosCadastroPlantaRecord;
import br.com.magna.botanica.api.record.DadosDetalhamentoPlantaRecord;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
class TratadorDeErrosTest {
	@Autowired
	private TestRestTemplate restTemplate;

	@LocalServerPort
	private int port;

	/*
	 * @Test void testNotFound() { ResponseEntity<String> response =
	 * restTemplate.getForEntity("/plantas/listagem/compra", String.class);
	 * assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode()); }
	 */

	@Test
	void testValidationErrors() {
		DadosCadastroPlantaRecord dados = new DadosCadastroPlantaRecord(null, "VERDE AZULADO", 2L, 4L, 5L, 2L, 2L, 4L);
		ResponseEntity<Object> response = restTemplate.postForEntity("/plantas/cadastrar", dados, Object.class);
		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
	}

	@Test
	void testCadastrandoRegistroJaCadastradi() {
		DadosCadastroPlantaRecord dados = new DadosCadastroPlantaRecord("SAMAMBAIA", "VERDE AZULADO", 2L, 4L, 5L, 2L,
				2L, 4L);
		ResponseEntity<String> response = restTemplate.postForEntity("/plantas/cadastrar", dados, String.class);
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());

	}

	@Test
	void testCadastrarDadosInvalidos() {
		DadosCadastroPlantaRecord dados = new DadosCadastroPlantaRecord("LÍRIO", "VERDE AZULADO", 1L, 4L, 5L, 2L, 2L,
				4L);
		ResponseEntity<String> response = restTemplate.postForEntity("/plantas/cadastrar", dados, String.class);
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
	}

	@Test
	void testAtualizarDadosInvalidos() {
		DadosAtualizacaoPlantaRecord dados = new DadosAtualizacaoPlantaRecord(7L, "LÍRIO", "VERDE AZULADO", 1L, 90L, 5L,
				2L, 2L, 4L);
		ResponseEntity<String> response = restTemplate.exchange("/plantas/atualizar", HttpMethod.PUT,
				new HttpEntity<>(dados), String.class);
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());

	}

}
